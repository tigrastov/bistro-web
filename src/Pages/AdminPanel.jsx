import { useState, useEffect } from 'react';
import { getAuth } from 'firebase/auth';

import {
  getFirestore,
  collection,
  getDocs,
  query,
  orderBy,
  updateDoc,
  doc,
  onSnapshot,
} from 'firebase/firestore';
import { NavLink } from 'react-router-dom';

import './AdminPanel.css';

function AdminPanel({ location, userData }) {
  const [orders, setOrders] = useState([]);
  const [loading, setLoading] = useState(true);
  const [selectedStatus, setSelectedStatus] = useState('all');
  const [currentPage, setCurrentPage] = useState(1);
  const [ordersPerPage, setOrdersPerPage] = useState(5); // Default for mobile

  const auth = getAuth();
  const db = getFirestore();

  const [showBell, setShowBell] = useState(false);


  // Responsive orders per page
  useEffect(() => {
    const handleResize = () => {
      setOrdersPerPage(window.innerWidth > 768 ? 10 : 5);
    };

    handleResize();
    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, []);





  // useEffect(() => {
  //   if (!location || !userData) {
  //     console.warn('–ù–µ—Ç –ª–æ–∫–∞—Ü–∏–∏ –∏–ª–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  //     return;
  //   }

  //   const ordersRef = collection(db, 'locations', location, 'orders');
  //   const q = query(ordersRef, orderBy('createdAt', 'desc'));

  //   let prevOrderIds = new Set(); // –∑–∞–ø–æ–º–Ω–∏–º —Å—Ç–∞—Ä—ã–µ –∑–∞–∫–∞–∑—ã
  //   let notificationActive = false;
  //   const audio = new Audio('/sounds/notify.mp3');

  //   const unsubscribe = onSnapshot(
  //     q,
  //     (snapshot) => {
  //       const updatedOrders = snapshot.docs.map((doc) => ({
  //         id: doc.id,
  //         ...doc.data(),
  //       }));

  //       // –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã
  //       const newOrders = updatedOrders.filter((o) => !prevOrderIds.has(o.id));

  //       if (prevOrderIds.size > 0 && newOrders.length > 0 && !notificationActive) {
  //         notificationActive = true;

  //         // üîî –∑–≤—É–∫
  //         audio.play().catch(() => { });

  //         // üî¥ –º–∏–≥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏
  //         const originalTitle = document.title;
  //         let flash = true;
  //         const interval = setInterval(() => {
  //           document.title = flash ? 'üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!' : originalTitle;
  //           flash = !flash;
  //         }, 1000);

  //         // –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –º–∏–≥–∞–Ω–∏–µ –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  //         const stopNotification = () => {
  //           clearInterval(interval);
  //           document.title = originalTitle;
  //           notificationActive = false;
  //           window.removeEventListener('focus', stopNotification);
  //           window.removeEventListener('click', stopNotification);
  //         };

  //         window.addEventListener('focus', stopNotification);
  //         window.addEventListener('click', stopNotification);
  //       }

  //       prevOrderIds = new Set(updatedOrders.map((o) => o.id));
  //       setOrders(updatedOrders.filter(order => order.status !== '–æ–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã'));
  //       setLoading(false);
  //     },
  //     (error) => {
  //       console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤:', error);
  //       setLoading(false);
  //     }
  //   );

  //   return () => unsubscribe();
  // }, [location, userData, db]);



  useEffect(() => {
    if (!location || !userData) {
      console.warn('–ù–µ—Ç –ª–æ–∫–∞—Ü–∏–∏ –∏–ª–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      return;
    }

    const ordersRef = collection(db, 'locations', location, 'orders');
    const q = query(ordersRef, orderBy('createdAt', 'desc'));

    let prevStatuses = new Map(); // üíæ id ‚Üí –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å—Ç–∞—Ç—É—Å
    let notificationActive = false;
    const audio = new Audio('/sounds/notify.mp3');

    const unsubscribe = onSnapshot(
      q,
      (snapshot) => {
        const updatedOrders = snapshot.docs.map((doc) => ({
          id: doc.id,
          ...doc.data(),
        }));

        // üí° –ò—â–µ–º –∑–∞–∫–∞–∑—ã, —É –∫–æ—Ç–æ—Ä—ã—Ö —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞ "–æ–ø–ª–∞—á–µ–Ω" –∏–ª–∏ "–æ–ø–ª–∞—á–µ–Ω–æ"
        const newlyPaid = updatedOrders.filter((order) => {
          const prevStatus = prevStatuses.get(order.id);
          return (
            prevStatus && // –±—ã–ª –∏–∑–≤–µ—Å—Ç–µ–Ω –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å—Ç–∞—Ç—É—Å
            prevStatus !== order.status && // —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è
            (order.status?.toLowerCase() === '–æ–ø–ª–∞—á–µ–Ω' ||
              order.status?.toLowerCase() === '–æ–ø–ª–∞—á–µ–Ω–æ')
          );
        });

        // üîî –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ—è–≤–∏–ª–∏—Å—å –Ω–æ–≤—ã–µ "–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ" –∑–∞–∫–∞–∑—ã
        if (prevStatuses.size > 0 && newlyPaid.length > 0 && !notificationActive) {
          notificationActive = true;

          // üîä –∑–≤—É–∫
          audio.play().catch(() => { });

          setShowBell(true);


          // ü™© –º–∏–≥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏
          const originalTitle = document.title;
          let flash = true;
          const interval = setInterval(() => {
            document.title = flash ? 'üí∏ –ù–æ–≤—ã–π –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑!' : originalTitle;
            flash = !flash;
          }, 1000);

          // üß© –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –º–∏–≥–∞–Ω–∏–µ –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
          const stopNotification = () => {
            clearInterval(interval);
            document.title = originalTitle;
            notificationActive = false;
            window.removeEventListener('focus', stopNotification);
            window.removeEventListener('click', stopNotification);

            setShowBell(false);

          };

          window.addEventListener('focus', stopNotification);
          window.addEventListener('click', stopNotification);
        }

        // üíæ –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–æ–≤
        prevStatuses = new Map(updatedOrders.map((o) => [o.id, o.status]));

        // üßπ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–∫–∞–∑—ã, –Ω–µ –Ω–∞—Ö–æ–¥—è—â–∏–µ—Å—è –≤ —Å—Ç–∞—Ç—É—Å–µ "–æ–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã"
        setOrders(updatedOrders.filter(order => order.status?.toLowerCase() !== '–æ–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã'));
        setLoading(false);
      },
      (error) => {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤:', error);
        setLoading(false);
      }
    );

    return () => unsubscribe();
  }, [location, userData, db]);



  const updateOrderStatus = async (orderId, newStatus) => {
    try {
      const orderRef = doc(db, 'locations', location, 'orders', orderId);
      await updateDoc(orderRef, { status: newStatus });
      setOrders((prevOrders) =>
        prevOrders.map((order) =>
          order.id === orderId ? { ...order, status: newStatus } : order
        )
      );
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞:', error);
    }
  };

  const filteredOrders = selectedStatus === 'all'
    ? orders
    : orders.filter(order => order.status === selectedStatus);

  const indexOfLastOrder = currentPage * ordersPerPage;
  const indexOfFirstOrder = indexOfLastOrder - ordersPerPage;
  const currentOrders = filteredOrders.slice(indexOfFirstOrder, indexOfLastOrder);

  const totalPages = Math.ceil(filteredOrders.length / ordersPerPage);

  if (loading) return <p className="admin-loading">–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–æ–≤...</p>;

  return (
    <div className="admin-orders">


      {showBell && (
        <div className="admin-bell">
          üîî –ù–æ–≤—ã–π –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑!
        </div>
      )}




      <h1 className="admin-title">–ó–∞–∫–∞–∑—ã –≤–∞—à–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞</h1>


      <div className="admin-add-product-wrapper">
        <NavLink to="/admin/add-product" className="admin-add-btn">
          ‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä
        </NavLink>
      </div>


      <div className="admin-status-tabs">
        <button onClick={() => setSelectedStatus('all')} className={selectedStatus === 'all' ? 'active' : ''}>–í—Å–µ</button>
        <button onClick={() => setSelectedStatus('–Ω–æ–≤—ã–π')} className={selectedStatus === '–Ω–æ–≤—ã–π' ? 'active' : ''}>–ù–æ–≤—ã–µ</button>
        <button onClick={() => setSelectedStatus('–≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ')} className={selectedStatus === '–≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ' ? 'active' : ''}>–í –æ–±—Ä–∞–±–æ—Ç–∫–µ</button>
        <button onClick={() => setSelectedStatus('–¥–æ—Å—Ç–∞–≤–∫–∞')} className={selectedStatus === '–¥–æ—Å—Ç–∞–≤–∫–∞' ? 'active' : ''}>–î–æ—Å—Ç–∞–≤–∫–∞</button>
        <button onClick={() => setSelectedStatus('–∑–∞–≤–µ—Ä—à—ë–Ω')} className={selectedStatus === '–∑–∞–≤–µ—Ä—à—ë–Ω' ? 'active' : ''}>–ó–∞–≤–µ—Ä—à—ë–Ω</button>
        <button onClick={() => setSelectedStatus('–æ—Ç–º–µ–Ω—ë–Ω')} className={selectedStatus === '–æ—Ç–º–µ–Ω—ë–Ω' ? 'active' : ''}>–û—Ç–º–µ–Ω—ë–Ω</button>
      </div>

      {currentOrders.length === 0 ? (
        <p className="admin-empty">–ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</p>
      ) : (
        <ul className="admin-order-list">
          {currentOrders.map((order) => (
            <li key={order.id} className="admin-order-card">
              <div className="admin-order-header">
                <span><strong>–ó–∞–∫–∞–∑ #{order.orderNumber ? String(order.orderNumber).padStart(4, '0') : order.id}</strong></span>
                <span>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {order.userName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</span>
                <span>–¢–µ–ª–µ—Ñ–æ–Ω: {order.userPhone || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</span>
                <span>
                  {order.createdAt
                    ? new Date(order.createdAt.seconds * 1000).toLocaleString()
                    : '–î–∞—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞'}
                </span>
              </div>
              <div className="admin-order-info">
                <p>–°—Ç–∞—Ç—É—Å: <strong>{order.status || '–Ω–æ–≤—ã–π'}</strong></p>
                <p>–°—É–º–º–∞: <strong>{order.total} ‚ÇΩ</strong></p>


                <select
                  value={order.status || '–Ω–æ–≤—ã–π'}
                  onChange={(e) => updateOrderStatus(order.id, e.target.value)}
                  style={{
                    backgroundColor:
                      order.status === '–Ω–æ–≤—ã–π'
                        ? '#e74c3c'
                        : order.status === '–≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ'
                          ? '#3498db'
                          : order.status === '–¥–æ—Å—Ç–∞–≤–∫–∞'
                            ? '#f1c40f'
                            : order.status === '–∑–∞–≤–µ—Ä—à—ë–Ω'
                              ? '#2ecc71'
                              : order.status === '–æ—Ç–º–µ–Ω—ë–Ω'
                                ? '#7f8c8d'
                                : '#e74c3c',
                    color:
                      order.status === '–¥–æ—Å—Ç–∞–≤–∫–∞'
                        ? '#0A0002'
                        : '#fff',
                  }}
                  className="status-select"
                >
                  <option value="–Ω–æ–≤—ã–π">–Ω–æ–≤—ã–π</option>
                  <option value="–≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ">–≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ</option>
                  <option value="–¥–æ—Å—Ç–∞–≤–∫–∞">–¥–æ—Å—Ç–∞–≤–∫–∞</option>
                  <option value="–∑–∞–≤–µ—Ä—à—ë–Ω">–∑–∞–≤–µ—Ä—à—ë–Ω</option>
                  <option value="–æ—Ç–º–µ–Ω—ë–Ω">–æ—Ç–º–µ–Ω—ë–Ω</option>
                </select>





              </div>
              <ul className="admin-order-items">
                {order.items.map((item, idx) => (
                  <li key={idx}>
                    {item.name} √ó {item.quantity} = {item.price * item.quantity} ‚ÇΩ
                  </li>
                ))}
              </ul>
            </li>
          ))}
        </ul>
      )}

      {totalPages > 1 && (
        <div className="admin-pagination">
          <button onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))} disabled={currentPage === 1}>–ù–∞–∑–∞–¥</button>
          <span>–°—Ç—Ä–∞–Ω–∏—Ü–∞ {currentPage} –∏–∑ {totalPages}</span>
          <button onClick={() => setCurrentPage(prev => Math.min(prev + 1, totalPages))} disabled={currentPage === totalPages}>–í–ø–µ—Ä—ë–¥</button>
        </div>
      )}
    </div>
  );
}

export default AdminPanel;
